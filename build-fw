#!/usr/bin/env bash

# Beende das Skript, sobald ein Fehler bei einem Kommando auftritt
set -e
set -o pipefail

# Überprüfe, ob alle notwendigen Tools zur Verfügung stehen
for tool in git make rsync
do
    command -v $tool >/dev/null 2>&1 \
        || { echo >&2 "\"$tool\" nicht installiert. Abbruch"; exit 1; }
done

# Benutzerabfragen
echo -e "Freifunk Firmware Tool\n"
echo -e "Community Wählen:\n"
echo -e "[T]roisdorf oder [H]ennef:"
read input_community
echo -e "Firmware [b]auen, [s]ignieren, [f]reigeben oder [c]leaning:"
read input_feature

# Wenn "cleaning" ausgewählt wurde, können Eingaben zu Branch und Version
# ignoriert werden. Setze dazu diese Werte auf "save values". Bei allen
# anderen Tasks/Features wird der User nach den Eingaben gefragt.
if [ "$input_feature" == "c" ]; then
    input_branch="s"
    input_version=""
else
    echo -e "Branch auswählen: [s]table, [b]eta, [e]xperimental"
    read input_branch
    echo -e "Neue Versionsnummer? (Nur für Bauen nötig)"
    read input_version
fi

# Wenn "freigeben" ausgewählt wurde, den User fragen, ob rsync mit der
# Option --dry-run ausgeführt werden soll. Das kann für Tests sinnvoll
# sein, wenn ein Kopieren der Firmware-Dateien nicht tatsächlich
# erfolgen soll.
rsync_opt="-aP --delete" # default rsync options
if [ "$input_feature" == "f" ]; then
    echo -e "Rsync mit Option --dry-run zu Testzwecken ausführen [j/n]?"
    read input_dryrun
    if [ "$input_dryrun" == "j" ]; then
        rsync_opt="$rsync_opt --dry-run"
    fi
fi

# Bedingungen setzen
case $input_community in
    troisdorf*|t*)
        community=troisdorf
        gluon_pfad=/home/gluon/gluon-troisdorf/
        firmware_pfad_unsigned=/home/gluon/firmware-unsigned-troisdorf/
        firmware_pfad_signed=/home/gluon/firmware-signed-troisdorf/;;
    hennef*|h*)
        community=hennef
        gluon_pfad=/home/gluon/gluon-hennef/
        firmware_pfad_unsigned=/home/gluon/firmware-unsigned-hennef/
        firmware_pfad_signed=/home/gluon/firmware-signed-hennef/;;
    *)
        echo "Keine gültige Auswahl für Community!"
        exit 1;;
esac

case $input_branch in
    stable*|s*)
        gluon_version=2014.4.x
        branch=stable;;
    beta*|b*)
        gluon_version=2014.4.x
        branch=beta;;
    experimental*|e*)
        gluon_version=master
        branch=experimental;;
    *)
        echo "Keine gültige Auswahl für Branch!"
        exit 1;;
esac

# Task/Feature ausführen
case $input_feature in

    #### Firmware bauen ####
    bauen*|b*)
        echo "Berechtigung wird geprüft"
        if [ "$USER" != "gluon" ]; then
            echo "Der Benutzer $USER ist nicht berechtigt, die Firmware zu bauen!" 
            exit 1
        else
            echo "User Gluon erkannt!"
        fi
        cd $gluon_pfad
        git pull
        git checkout $gluon_version
        make dirclean
        make update
        make GLUON_BRANCH=$branch GLUON_TARGET=ar71xx-generic DEFAULT_GLUON_RELEASE=2014.4-$branch-$input_version
        if [ branch = experimental ]; then
            make -j5 GLUON_BRANCH=$branch GLUON_TARGET=x86-generic DEFAULT_GLUON_RELEASE=$gluon_version-$branch-$input_version
            make -j5 GLUON_BRANCH=$branch GLUON_TARGET=x86-kvm_guest DEFAULT_GLUON_RELEASE=$gluon_version-$branch-$input_version
        fi
        make manifest GLUON_BRANCH=$branch
        rm -rf "$firmware_pfad_unsigned""$branch"
        cp -r "$gluon_pfad"images "$firmware_pfad_unsigned""$branch"
        rm -rf "$gluon_pfad"images
        chmod 775 -R $firmware_pfad_unsigned;;
    
    #### Firmware signieren ####
    signieren*|s*)
        "$gluon_pfad"contrib/sign.sh ~/firmwarekey "$firmware_pfad_unsigned""$branch"/sysupgrade/"$branch".manifest;;

    #### Firmware freigeben ####
    freigeben*|f*)
        if [ "$USER" != "gluon" ]; then
            echo "Der Benutzer $USER ist nicht berechtigt, die Firmware freizugeben!" 
            exit 1
        else
            echo "User Gluon erkannt!"
        fi
        rm -rf "$firmware_pfad_signed"/"$branch"
        mv "$firmware_pfad_unsigned"/"$branch" "$firmware_pfad_signed"/"$branch"
        if [ $community = troisdorf ]; then
            rsync $rsync_opt $firmware_pfad_signed root@10.0.0.75:/var/www/images.freifunk-troisdorf.de/firmware
            rsync $rsync_opt --exclude=/latest $firmware_pfad_signed fwupload@update2.infra.fftdf:~/www
        elif [ $community = hennef ]; then
            rsync $rsync_opt $firmware_pfad_signed root@10.0.0.75:/var/www/images.freifunk-hennef.de/firmware
        fi;;

    #### Aufräumen ####
    cleaning*|c*)
        if [ "$USER" != "gluon" ]; then
            echo "Keine Berechtigung" 
            exit 1
        else
            echo "User Gluon erkannt!"
        fi
        cd $gluon_pfad
        make dirclean;;                
esac

echo -e "Alle Befehle ausgeführt!"

